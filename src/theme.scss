@use '~@angular/material' as mat;
@import '~bootstrap/scss/functions';
@import '~bootstrap/scss/variables';
@import '~bootstrap/scss/mixins';
//@import '~@angular/material/theming';

$primary: mat.define-palette(mat.$indigo-palette);
$accent: mat.define-palette(mat.$teal-palette, A200, A100, A400);
$warn: mat.define-palette(mat.$amber-palette);

$light-theme: mat.define-light-theme((
  color: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
  )
));

$dark-theme: mat.define-dark-theme((
  color: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
  )
));

@mixin theme-extension($config-or-theme) {
  $config: mat.get-color-config($config-or-theme);
  $primary: map-get($config, primary);
  $accent: map-get($config, accent);
  $background: map-get($config, background);
  $foreground: map-get($config, foreground);
  $is-dark: map-get($config, is_dark);

  @include media-breakpoint-up(md) {
    .menu {
      li.button {
        a {
          background-color: mat.get-color-from-palette($primary, 700);
          border: 1px solid mat.get-color-from-palette($primary, 800);

          &:hover {
            background-color: mat.get-color-from-palette($primary, 800);
            border: 1px solid mat.get-color-from-palette($primary, 900);
          }
        }
      }
    }

    .button.secondary a {
      background-color: transparent;
    }

    .button:not(.secondary) a:hover {
      background-color: mat.get-color-from-palette($primary, 800);
      border-color: mat.get-color-from-palette($primary, 900);
    }

    .button.secondary a:hover {
      color: mat.get-contrast-color-from-palette($primary, 300);
    }
  }

  body {
    @if($is-dark) {
      background-color: darken(map-get($background, background), 5%);
    } @else {
      background-color: darken(map-get($background, background), 10%);
    }
  }

  main.container {
    background-color: map-get($background, background);
  }

  app-cookie-banner {
    background-color: map-get($background, background);

    .cookie-text {
      color: map-get($foreground, base);
    }
  }

  nav {
    background-color: mat.get-color-from-palette($primary);

    a {
      color: mat.get-contrast-color-from-palette($primary, 300);
    }
  }

  footer {
    background-color: mat.get-color-from-palette($primary);

    *,
    a {
      color: mat.get-contrast-color-from-palette($primary, 300);
    }

    .mat-select-arrow {
      color: mat.get-color-from-palette($primary, default-contrast) !important;
    }
  }

  .menu {
    li {
      color: mat.get-contrast-color-from-palette($primary, 300);

      &.item:not(.button):not(.icon) {
        @include media-breakpoint-down(lg) {
          &.open {
            background-color: mat.get-color-from-palette($primary, 600);

            ul {
              background-color: inherit;

              li:hover {
                background-color: mat.get-color-from-palette($primary, 700);
              }
            }
          }
        }

        &:hover,
        &:focus,
        &:focus-within {
          background-color: mat.get-color-from-palette($primary, 600);

          ul {
            background-color: inherit;

            li:hover {
              background-color: mat.get-color-from-palette($primary, 700);
            }
          }
        }
      }
    }

    .button {
      border-bottom: 1px mat.get-color-from-palette($primary, 900) solid;
    }
  }
}
